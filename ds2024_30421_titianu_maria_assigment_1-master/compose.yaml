services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    labels:
      - "traefik.enable=true"
      - "traefik.tcp.routers.rabbitmq-amqp.entrypoints=amqp"
      - "traefik.tcp.routers.rabbitmq-amqp.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.rabbitmq-amqp.service=rabbitmq-amqp-service"
      - "traefik.tcp.services.rabbitmq-amqp-service.loadbalancer.server.port=5672"
      - "traefik.http.routers.rabbitmq-ui.entrypoints=web"
      - "traefik.http.routers.rabbitmq-ui.rule=Host(`rabbitmq.localhost`)"
      - "traefik.http.services.rabbitmq-ui.loadbalancer.server.port=15672"
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq/
      - rabbitmq-log:/var/log/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 5s
      timeout: 5s
      retries: 5

  traefik:
    image: traefik:v2.11
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.amqp.address=:5672"
      - "--providers.file.filename=/etc/traefik/dynamic-conf.yml"
      - "--accesslog=true"
      - "--accesslog.filepath=/var/log/traefik/access.log"
      - "--log.level=DEBUG"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
      - "5672:5672"
      - "15672:15672"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - traefik_logs:/var/log/traefik
      - ./dynamic-conf.yml:/etc/traefik/dynamic-conf.yml:ro
      - ./certs/:/certs/:ro

  security-init:
    build: security
    hostname: security-init
    depends_on: 
      postgresql-security:
        condition: service_healthy
    environment:
      - SERVER_PORT=8080
      - DB_IP=postgresql-security
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_DBNAME=security_sd
      - DB_DDL_AUTO=create
    labels:
      - "traefik.enable=false"

  security:
    build: security
    hostname: security
    depends_on: 
      postgresql-security:
        condition: service_healthy
    environment:
      - USER_IP=traefik
      - USER_PORT=80
      - DEVICE_IP=traefik
      - DEVICE_PORT=80
      - SERVER_PORT=8080
      - DB_IP=postgresql-security
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_DBNAME=security_sd
      - DB_DDL_AUTO=none
    deploy:
        replicas: 2
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.security.entrypoints=websecure"
      - "traefik.http.routers.security.tls=true"
      - "traefik.http.routers.security.rule=Host(`security.localhost`) || PathPrefix(`/security`)"
      - "traefik.http.middlewares.security-strip.stripprefix.prefixes=/security"
      - "traefik.http.routers.security.middlewares=security-strip"
      - "traefik.http.services.security.loadbalancer.server.port=8080"

  postgresql-security:
    image: postgres
    restart: always
    ports:
      - "5436:5432"
    volumes:
      - db-data-security:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=security_sd
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  user-management-init:
    build: userManagement
    hostname: user-management-init
    depends_on: 
      postgresql-user-management:
        condition: service_healthy
    environment:
      - SERVER_PORT=8080
      - DB_IP=postgresql-user-management
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_DBNAME=user_sd
      - DB_DDL_AUTO=create
    labels:
      - "traefik.enable=false"

  user-management:
    build: userManagement
    hostname: user-management
    depends_on: 
      postgresql-user-management:
        condition: service_healthy
    environment:
      - DEVICE_IP=traefik
      - DEVICE_PORT=80
      - SERVER_PORT=8080
      - DB_IP=postgresql-user-management
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_DBNAME=user_sd
      - DB_DDL_AUTO=none
    deploy:
        replicas: 2
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.user-management.rule=Host(`user-management.localhost`) || PathPrefix(`/user-management`)"
      - "traefik.http.middlewares.user-management-strip.stripprefix.prefixes=/user-management"
      - "traefik.http.routers.user-management.middlewares=user-management-strip"
      - "traefik.http.services.user-management.loadbalancer.server.port=8080"

  postgresql-user-management:
    image: postgres
    restart: always
    ports:
      - "5433:5432"
    volumes:
      - db-data-user-management:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=user_sd
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  device-management-init:
    build: deviceManagement
    hostname: device-management-init
    depends_on: 
      postgresql-device-management:
        condition: service_healthy
    environment:
      - SERVER_PORT=8080
      - DB_IP=postgresql-device-management
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_DBNAME=device_sd
      - DB_DDL_AUTO=create
    labels:
      - "traefik.enable=false"

  device-management:
    build: deviceManagement
    hostname: device-management
    depends_on: 
      postgresql-device-management:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - SERVER_PORT=8080
      - DB_IP=postgresql-device-management
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_DBNAME=device_sd
      - DB_DDL_AUTO=none
      - RQ_HOST=traefik
      - RQ_PORT=5672
    deploy:
        replicas: 2
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.device-management.rule=Host(`device-management.localhost`) || PathPrefix(`/device-management`)"
      - "traefik.http.middlewares.device-management-strip.stripprefix.prefixes=/device-management"
      - "traefik.http.routers.device-management.middlewares=device-management-strip"
      - "traefik.http.services.device-management.loadbalancer.server.port=8080"

  postgresql-device-management:
    image: postgres
    restart: always
    ports:
      - "5434:5432"
    volumes:
      - db-data-device-management:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=device_sd
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  monitoring:
    build: monitoring
    hostname: monitoring
    depends_on: 
      postgresql-monitoring:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - SERVER_PORT=8080
      - DB_IP=postgresql-monitoring
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_DBNAME=monitoring_sd
      - DB_DDL_AUTO=create
      - RQ_HOST=traefik
      - RQ_PORT=5672
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.monitoring.entrypoints=websecure"
      - "traefik.http.routers.monitoring.tls=true"
      - "traefik.http.routers.monitoring.rule=Host(`monitoring.localhost`)"
      - "traefik.http.services.monitoring.loadbalancer.server.port=8080"

  postgresql-monitoring:
    image: postgres
    restart: always
    ports:
      - "5435:5432"
    volumes:
      - db-data-monitoring:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=monitoring_sd
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  chat:
    build: chat
    hostname: chat
    environment:
      - SERVER_PORT=8080
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.chat.entrypoints=websecure"
      - "traefik.http.routers.chat.tls=true"
      - "traefik.http.routers.chat.rule=Host(`chat.localhost`)"
      - "traefik.http.services.chat.loadbalancer.server.port=8080"

  frontend:
    build: frontend
    depends_on:
      - user-management
      - device-management
    deploy:
        replicas: 2
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls=true"  
      - "traefik.http.routers.frontend.rule=Host(`frontend.localhost`)"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"

volumes:
  db-data-security:
  db-data-user-management:
  db-data-device-management:
  db-data-monitoring:
  rabbitmq-data:
  rabbitmq-log: 
  traefik_logs:   
